{"version":3,"sources":["webpack:///./js/promisification.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger","updatedUsers","table","makeTransaction","transaction","onSuccess","onError","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"wJAGMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAU,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAExBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GACjBA,EACEW,EAASE,KAAI,SAAAC,GAAI,OACfA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAK/DC,EAAS,SAAAC,GAAY,OAAIZ,QAAQa,MAAMD,IAW7CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAGnC,IAIMG,EAAkB,SAACC,EAAaC,EAAWC,GAC/C,IALiCC,EAAKC,EAKhC1B,GAL2ByB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAIvB,SAAQ,SAACC,EAAS2B,GAC3B1B,YAAW,WACUuB,KAAKE,SAAW,GAEjC1B,EAAQ,CAAE4B,GAAIT,EAAYS,GAAIzB,KAAMN,IAEpC8B,EAAO,CAAEC,GAAIT,EAAYS,OAE1B/B,OAIDgC,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIzB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BuB,EAA3B,iBAA8CzB,EAA9C,OAGI2B,EAAW,SAAC,GAAW,IAATF,EAAS,EAATA,GAClBxB,QAAQ2B,KAAR,gCAA6CH,EAA7C,8BAaFV,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAChEZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAChEZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAAM1B,KAAKuB,GAAYI,MAAMH,GAC/DZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,K","file":"main.9ccf54bb628b26882b27.js","sourcesContent":["'use strict';\r\n\r\n//++++++   task 1  +++++++\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger1); // Resolved after 2000ms\r\ndelay(1000).then(logger1); // Resolved after 1000ms\r\ndelay(1500).then(logger1); // Resolved after 1500ms\r\n\r\n//++++++   task 2  +++++++\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    resolve(\r\n      allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      ),\r\n    );\r\n  });\r\n};\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n//toggleUserState(users, 'Mango', logger);\r\n//toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n//++++++   task 3  +++++++\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction, onSuccess, onError) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject({ id: transaction.id });\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = ({ id }) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}